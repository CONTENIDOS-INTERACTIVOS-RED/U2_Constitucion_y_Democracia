{"remainingRequest":"/home/runner/work/U2_Constitucion_y_Democracia/U2_Constitucion_y_Democracia/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/U2_Constitucion_y_Democracia/U2_Constitucion_y_Democracia/src/views/curso/Tema3.vue?vue&type=template&id=2f1b80c7&lang=pug&","dependencies":[{"path":"/home/runner/work/U2_Constitucion_y_Democracia/U2_Constitucion_y_Democracia/src/views/curso/Tema3.vue","mtime":1740340929931},{"path":"/home/runner/work/U2_Constitucion_y_Democracia/U2_Constitucion_y_Democracia/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U2_Constitucion_y_Democracia/U2_Constitucion_y_Democracia/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/runner/work/U2_Constitucion_y_Democracia/U2_Constitucion_y_Democracia/node_modules/pug-plain-loader/index.js","mtime":499162500000},{"path":"/home/runner/work/U2_Constitucion_y_Democracia/U2_Constitucion_y_Democracia/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U2_Constitucion_y_Democracia/U2_Constitucion_y_Democracia/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5jdXJzby1tYWluLWNvbnRhaW5lci5wYi0zCiAgQmFubmVySW50ZXJubyg6c3ViVGl0dWxvPSInMy4gQmxvcXVlIGRlIGNvbnN0aXR1Y2lvbmFsaWRhZCciKQogIC5jb250YWluZXIudGFyamV0YS50YXJqZXRhLS1ibGFuY2EucC00LnAtbWQtNS5vdmVyZmxvdy1oaWRkZW4KCiAgICBwKGRhdGEtYW9zPSJmYWRlLXVwIikgRWwgY29uY2VwdG8gZGUgYmxvcXVlIGRlIGNvbnN0aXR1Y2lvbmFsaWRhZCBzZSBlc3RhYmxlY2UgY29tbyB1biBtZWNhbmlzbW8gcXVlIGluY29ycG9yYSBub3JtYXMgeSBwcmluY2lwaW9zIGludGVybmFjaW9uYWxlcyBlbiBlbCBvcmRlbmFtaWVudG8ganVyw61kaWNvIGludGVybm8gY29uIHJhbmdvIGNvbnN0aXR1Y2lvbmFsLiBFbiBlbCBjYXNvIGNvbG9tYmlhbm8sIGVzdGUgY29uY2VwdG8gc2Ugc3VzdGVudGEgZW4gZWwgYXJ0w61jdWxvIDkzIGRlIGxhIENvbnN0aXR1Y2nDs24gUG9sw610aWNhLCBxdWUgb3RvcmdhIHByZXZhbGVuY2lhIGEgbG9zIHRyYXRhZG9zIHkgY29udmVuaW9zIGludGVybmFjaW9uYWxlcyBlbiBtYXRlcmlhIGRlIGRlcmVjaG9zIGh1bWFub3Mgc29icmUgbGFzIGxleWVzIGludGVybmFzLCBnYXJhbnRpemFuZG8gc3UgYWxpbmVhY2nDs24gY29uIGxvcyBwcmluY2lwaW9zIGNvbnN0aXR1Y2lvbmFsZXMgKENvbnN0aXR1Y2nDs24gUG9sw610aWNhIGRlIENvbG9tYmlhLCAxOTkxKS4KCiAgICBwKGRhdGEtYW9zPSJmYWRlLXVwIikgTG9zIGNvbXBvbmVudGVzIHByaW5jaXBhbGVzIGRlbCBibG9xdWUgZGUgY29uc3RpdHVjaW9uYWxpZGFkIHNvbjoKCgogICAgVGFic0MuY29sb3ItYWNlbnRvLWNvbnRlbmlkby5tYi01CiAgICAgIC50YWJzLWNvbnRlbnQuYm9yZGVyLnB4LTQucC1tZC01LnB5LTModGl0dWxvPSJGdW5kYW1lbnRvIG5vcm1hdGl2byIgOmljb249InJlcXVpcmUoJ0AvYXNzZXRzL2J1bGxldHMvaWNvbi10YWItYy0xLnN2ZycpIiApCiAgICAgICAgLnJvdwogICAgICAgICAgLmNvbC1tZC02LmNvbC1sZy03LmNvbC14bC04Lm1iLTQubWItbWQtMC5vcmRlci0yCiAgICAgICAgICAgIGg0IEZ1bmRhbWVudG8gbm9ybWF0aXZvCiAgICAgICAgICAgIHAgQmFzYWRvIGVuIGVsIGFydMOtY3VsbyA5MyBkZSBsYSBDb25zdGl0dWNpw7NuLCBpbnRlZ3JhIHRyYXRhZG9zIHkgY29udmVuaW9zIGludGVybmFjaW9uYWxlcyBzb2JyZSBkZXJlY2hvcyBodW1hbm9zIGFsIG9yZGVuYW1pZW50byBqdXLDrWRpY28gaW50ZXJuby4KICAgICAgICAKICAgICAgICAgIC5jb2wtbWQtNi5jb2wtbGctNS5jb2wteGwtNC5vcmRlci0xCiAgICAgICAgICAgIGZpZ3VyZShkYXRhLWFvcz0iem9vbS1pbiIpCiAgICAgICAgICAgICAgaW1nKHNyYz0nQC9hc3NldHMvY3Vyc28vdGVtYTMvdGFiLTEucG5nJywgYWx0PScnKQoKICAgICAgLnRhYnMtY29udGVudC5ib3JkZXIucHgtNC5wLW1kLTUucHktMyh0aXR1bG89IkNvbnN0cnVjY2nDs24ganVyaXNwcnVkZW5jaWFsIiA6aWNvbj0icmVxdWlyZSgnQC9hc3NldHMvYnVsbGV0cy9pY29uLXRhYi1jLTEuc3ZnJykiICkKICAgICAgICAucm93CiAgICAgICAgICAuY29sLW1kLTYuY29sLWxnLTcuY29sLXhsLTgubWItNC5tYi1tZC0wLm9yZGVyLTIKICAgICAgICAgICAgaDQgQ29uc3RydWNjacOzbiBqdXJpc3BydWRlbmNpYWwKICAgICAgICAgICAgcCBEZXNhcnJvbGxhZG8gcG9yIGxhIENvcnRlIENvbnN0aXR1Y2lvbmFsLCBpbmNsdXllIG5vcm1hcyBpbnRlcm5hY2lvbmFsZXMgcmF0aWZpY2FkYXMgcG9yIENvbG9tYmlhIHkgcHJpbmNpcGlvcyBjb21wbGVtZW50YXJpb3MgYSBsYSBpbnRlcnByZXRhY2nDs24gZGUgZGVyZWNob3MgZnVuZGFtZW50YWxlcy4KCiAgICAgICAgICAuY29sLW1kLTYuY29sLWxnLTUuY29sLXhsLTQub3JkZXItMQogICAgICAgICAgICBmaWd1cmUoZGF0YS1hb3M9Inpvb20taW4iKQogICAgICAgICAgICAgIGltZyhzcmM9J0AvYXNzZXRzL2N1cnNvL3RlbWEzL3RhYi0yLnBuZycsIGFsdD0nJykKCiAgICAgIC50YWJzLWNvbnRlbnQuYm9yZGVyLnB4LTQucC1tZC01LnB5LTModGl0dWxvPSJPYmpldGl2byAiIDppY29uPSJyZXF1aXJlKCdAL2Fzc2V0cy9idWxsZXRzL2ljb24tdGFiLWMtMS5zdmcnKSIgKQogICAgICAgIC5yb3cKICAgICAgICAgIC5jb2wtbWQtNi5jb2wtbGctNy5jb2wteGwtOC5tYi00Lm1iLW1kLTAub3JkZXItMgogICAgICAgICAgICBoNCBPYmpldGl2byAKICAgICAgICAgICAgcCBGb3J0YWxlY2VyIGxhIHByb3RlY2Npw7NuIGRlIGRlcmVjaG9zIGZ1bmRhbWVudGFsZXMgeSBnYXJhbnRpemFyIGVsIGN1bXBsaW1pZW50byBkZSBjb21wcm9taXNvcyBpbnRlcm5hY2lvbmFsZXMgZW4gbWF0ZXJpYSBkZSBkZXJlY2hvcyBodW1hbm9zLgoKICAgICAgICAgIC5jb2wtbWQtNi5jb2wtbGctNS5jb2wteGwtNC5vcmRlci0xCiAgICAgICAgICAgIGZpZ3VyZShkYXRhLWFvcz0iem9vbS1pbiIpCiAgICAgICAgICAgICAgaW1nKHNyYz0nQC9hc3NldHMvY3Vyc28vdGVtYTMvdGFiLTMucG5nJywgYWx0PScnKQoKICAgICAgLnRhYnMtY29udGVudC5ib3JkZXIucHgtNC5wLW1kLTUucHktMyh0aXR1bG89IkVqZW1wbG8gcHLDoWN0aWNvICIgOmljb249InJlcXVpcmUoJ0AvYXNzZXRzL2J1bGxldHMvaWNvbi10YWItYy0xLnN2ZycpIiApCiAgICAgICAgLnJvdwogICAgICAgICAgLmNvbC1tZC02LmNvbC1sZy03LmNvbC14bC04Lm1iLTQubWItbWQtMC5vcmRlci0yCiAgICAgICAgICAgIGg0IEVqZW1wbG8gcHLDoWN0aWNvIAogICAgICAgICAgICBwIExhIENvbnZlbmNpw7NuIEFtZXJpY2FuYSBzb2JyZSBEZXJlY2hvcyBIdW1hbm9zIHNlIGhhIHV0aWxpemFkbyBwYXJhIGludGVycHJldGFyIGRlcmVjaG9zIGNvbW8gbGEgaWd1YWxkYWQsIGxhIGRpZ25pZGFkIGh1bWFuYSB5IGVsIGFjY2VzbyBhIGxhIGp1c3RpY2lhLgoKICAgICAgICAgIC5jb2wtbWQtNi5jb2wtbGctNS5jb2wteGwtNC5vcmRlci0xCiAgICAgICAgICAgIGZpZ3VyZShkYXRhLWFvcz0iem9vbS1pbiIpCiAgICAgICAgICAgICAgaW1nKHNyYz0nQC9hc3NldHMvY3Vyc28vdGVtYTMvdGFiLTQucG5nJywgYWx0PScnKQoKICAgIGgyKGRhdGEtYW9zPSJmYWRlLWxlZnQiKSBSb2wgZGVsIGJsb3F1ZSBkZSBjb25zdGl0dWNpb25hbGlkYWQgZW4gbGEgcGFydGljaXBhY2nDs24gY2l1ZGFkYW5hCgogICAgcChkYXRhLWFvcz0iZmFkZS11cCIpIEVsIGJsb3F1ZSBkZSBjb25zdGl0dWNpb25hbGlkYWQgdGFtYmnDqW4gZGVzZW1wZcOxYSB1biBwYXBlbCBjcnVjaWFsIGVuIGdhcmFudGl6YXIgbG9zIGRlcmVjaG9zIGRlIHBhcnRpY2lwYWNpw7NuIGNpdWRhZGFuYSwgY29uc2FncmFkb3MgZW4gZWwgI1tiIGFydMOtY3VsbyAxMDMgZGUgbGEgQ29uc3RpdHVjacOzbl0sIGxvcyBjdWFsZXMgaW5jbHV5ZW4gbWVjYW5pc21vcyBjb21vOgoKCiAgICAuYmctZnVsbC13aWR0aC5iZy1jb2xvci1pbmZvLm1iLTUKICAgICAgLnAtNC5wLW1kLTUKICAgICAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIuYWxpZ24taXRlbXMtY2VudGVyCiAgICAgICAgICAuY29sLWxnLTEwCiAgICAgICAgICAgIEltYWdlbkluZm9ncmFmaWNhLmNvbG9yLXNlY3VuZGFyaW8KICAgICAgICAgICAgICAgIHRlbXBsYXRlKHYtc2xvdDppbWFnZW4pCiAgICAgICAgICAgICAgICAgIGZpZ3VyZQogICAgICAgICAgICAgICAgICAgIGltZyhzcmM9J0AvYXNzZXRzL2N1cnNvL3RlbWEzL2luZm8xLnN2ZycsIGFsdD0nJywgc3R5bGU9Im1heC13aWR0aDogOTAzcHg7IikubXgtYXV0bwoKICAgICAgICAgICAgICAgIC5iZy1jb2xvci13aGl0ZS5ib3gtc2hhZG93LnAtMyh4PSI1MCUiIHk9IjYyJSIgbnVtZXJvPSIrIikKICAgICAgICAgICAgICAgICAgaDUgSGVycmFtaWVudGFzIGNvbXBsZW1lbnRhcmlhcwogICAgICAgICAgICAgICAgICBwLm1iLTIgLSBBY2Npw7NuIGRlIHR1dGVsYSAKICAgICAgICAgICAgICAgICAgcCAtIERlcmVjaG8gZGUgcGV0aWNpw7NuCgogICAgICAgICAgICAgICAgLmJnLWNvbG9yLXdoaXRlLmJveC1zaGFkb3cucC0zKHg9IjE4JSIgeT0iNjIlIiBudW1lcm89IisiKQogICAgICAgICAgICAgICAgICBoNSBNZWNhbmlzbW9zIHByaW5jaXBhbGVzIGRlIHBhcnRpY2lwYWNpw7NuCiAgICAgICAgICAgICAgICAgIHAubWItMiAtIFZvdG8gCiAgICAgICAgICAgICAgICAgIHAubWItMiAtIFJlZmVyZW5kbyAKICAgICAgICAgICAgICAgICAgcC5tYi0yIC0gUGxlYmlzY2l0byAKICAgICAgICAgICAgICAgICAgcC5tYi0yIC0gQ29uc3VsdGEgcG9wdWxhciAKICAgICAgICAgICAgICAgICAgcC5tYi0yIC0gSW5pY2lhdGl2YSBsZWdpc2xhdGl2YSBvIG5vcm1hdGl2YSAKICAgICAgICAgICAgICAgICAgcC5tYi0yIC0gUmV2b2NhdG9yaWEgZGVsIG1hbmRhdG8gCiAgICAgICAgICAgICAgICAgIHAgLSBDYWJpbGRvIGFiaWVydG8KCiAgICAgICAgICAgICAgICAuYmctY29sb3Itd2hpdGUuYm94LXNoYWRvdy5wLTMoeD0iODIlIiB5PSI2MiUiIG51bWVybz0iKyIpCiAgICAgICAgICAgICAgICAgIGg1IEVzdMOhbmRhcmVzIGludGVybmFjaW9uYWxlcyBhcGxpY2Fkb3MKICAgICAgICAgICAgICAgICAgcCAtIENvbnZlbmlvIDE2OSBkZSBsYSBPcmdhbml6YWNpw7NuIEludGVybmFjaW9uYWwgZGVsIFRyYWJham86IFByb3RlZ2UgbG9zIGRlcmVjaG9zIGNvbGVjdGl2b3MgZGUgY29tdW5pZGFkZXMgaW5kw61nZW5hcyB5IGFmcm9kZXNjZW5kaWVudGVzIGVuIGNvbnN1bHRhcyBwb3B1bGFyZXMuCgogICAgaDMoZGF0YS1hb3M9ImZhZGUtbGVmdCIpIE1lY2FuaXNtb3MgZGUgUGFydGljaXBhY2nDs24gQ2l1ZGFkYW5hIGVuIENvbG9tYmlhCgogICAgcChkYXRhLWFvcz0iZmFkZS11cCIpIExvcyBtZWNhbmlzbW9zIGRlIHBhcnRpY2lwYWNpw7NuIGNpdWRhZGFuYSBzb24gcGlsYXJlcyBmdW5kYW1lbnRhbGVzIHBhcmEgZm9ydGFsZWNlciBsYSBkZW1vY3JhY2lhIHkgZ2FyYW50aXphciBxdWUgbG9zIGNpdWRhZGFub3MgZWplcnphbiBzdXMgZGVyZWNob3MgZW4gQ29sb21iaWEuIERlc2RlIGVsIHZvdG8gY29tbyBiYXNlIGRlIGxhIGRlbW9jcmFjaWEgcmVwcmVzZW50YXRpdmEsIGhhc3RhIGluc3RydW1lbnRvcyBjb21vIGVsIHJlZmVyZW5kbywgZWwgcGxlYmlzY2l0byB5IGxhIGNvbnN1bHRhIHBvcHVsYXIsIGVzdGFzIGhlcnJhbWllbnRhcyBwZXJtaXRlbiBxdWUgbGEgY2l1ZGFkYW7DrWEgaW5mbHV5YSBlbiBkZWNpc2lvbmVzIHBvbMOtdGljYXMsIGxlZ2lzbGF0aXZhcyB5IHNvY2lhbGVzLgoKCiAgICAuYmctZnVsbC13aWR0aC5iZy1mb25kby1zbGlkZXIubWItNQogICAgICAucC00LnAtbWQtNQogICAgICAgIFNseWRlckEodGlwbz0iYiIpLmJnLXdoaXRlCiAgICAgICAgICAucm93LmFsaWduLWl0ZW1zLWNlbnRlci5wLTQucC1tZC01CiAgICAgICAgICAgIC5jb2wtbGctNS5vcmRlci1sZy0yCiAgICAgICAgICAgICAgZmlndXJlCiAgICAgICAgICAgICAgICBpbWcoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hMy9zbGlkZXItMS5wbmciKQogICAgICAgICAgICAuY29sLWxnLTcub3JkZXItbGctMQogICAgICAgICAgICAgIGg1IEVsIHZvdG8KICAgICAgICAgICAgICBwIEVzIGVsIG1lY2FuaXNtbyBtw6FzIGZ1bmRhbWVudGFsIGRlIHBhcnRpY2lwYWNpw7NuIGNpdWRhZGFuYSB5IGJhc2UgZGUgbGEgZGVtb2NyYWNpYSByZXByZXNlbnRhdGl2YS4gQSB0cmF2w6lzIGRlbCBzdWZyYWdpbywgbG9zIGNpdWRhZGFub3MgZWxpZ2VuIGEgc3VzIGdvYmVybmFudGVzIHkgZm9ydGFsZWNlbiBsYSBsZWdpdGltaWRhZCBkZSBsYXMgaW5zdGl0dWNpb25lcy4gRWplbXBsbzogTGFzIGVsZWNjaW9uZXMgcHJlc2lkZW5jaWFsZXMgZGUgMjAyMiByZWFmaXJtYXJvbiBlbCBjb21wcm9taXNvIGRlbW9jcsOhdGljbyBlbiBDb2xvbWJpYS4KICAgICAgICAgIC5yb3cuYWxpZ24taXRlbXMtY2VudGVyLnAtNC5wLW1kLTUKICAgICAgICAgICAgLmNvbC1sZy01Lm9yZGVyLWxnLTIKICAgICAgICAgICAgICBmaWd1cmUKICAgICAgICAgICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWEzL3NsaWRlci0yLnBuZyIpCiAgICAgICAgICAgIC5jb2wtbGctNy5vcmRlci1sZy0xCiAgICAgICAgICAgICAgaDUgRWwgcmVmZXJlbmRvCiAgICAgICAgICAgICAgcCBQZXJtaXRlIGFwcm9iYXIgbyByZWNoYXphciBsZXllcywgYWN0b3MgbGVnaXNsYXRpdm9zIG8gcmVmb3JtYXMgY29uc3RpdHVjaW9uYWxlcyBtZWRpYW50ZSBlbCB2b3RvLiBFamVtcGxvOiBFbCByZWZlcmVuZG8gZGUgMjAwMyBhYm9yZMOzIHJlZm9ybWFzIHBvbMOtdGljYXMgeSBhZG1pbmlzdHJhdGl2YXMsIGRlc3RhY2FuZG8gbGEgaW1wb3J0YW5jaWEgZGUgZXN0ZSBpbnN0cnVtZW50byBlbiBsYSBkZW1vY3JhY2lhIHBhcnRpY2lwYXRpdmEuCiAgICAgICAgICAucm93LmFsaWduLWl0ZW1zLWNlbnRlci5wLTQucC1tZC01CiAgICAgICAgICAgIC5jb2wtbGctNS5vcmRlci1sZy0yCiAgICAgICAgICAgICAgZmlndXJlCiAgICAgICAgICAgICAgICBpbWcoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hMy9zbGlkZXItMy5wbmciKQogICAgICAgICAgICAuY29sLWxnLTcub3JkZXItbGctMQogICAgICAgICAgICAgIGg1IEVsIHBsZWJpc2NpdG8KICAgICAgICAgICAgICBwIE1lY2FuaXNtbyBjb25zdWx0aXZvIHF1ZSBwZXJtaXRlIGV4cHJlc2FyIGxhIG9waW5pw7NuIGNpdWRhZGFuYSBzb2JyZSBkZWNpc2lvbmVzIHBvbMOtdGljYXMgcmVsZXZhbnRlcy4gRWplbXBsbzogRWwgcGxlYmlzY2l0byBwb3IgbGEgcGF6IGRlIDIwMTYgbWlkacOzIGxhIHBlcmNlcGNpw7NuIGNpdWRhZGFuYSBzb2JyZSBsb3MgYWN1ZXJkb3MgZGUgcGF6IGVudHJlIGVsIGdvYmllcm5vIHkgbGFzIEZBUkMuCgoKICAgICAgICAgIC5yb3cuYWxpZ24taXRlbXMtY2VudGVyLnAtNC5wLW1kLTUKICAgICAgICAgICAgLmNvbC1sZy01Lm9yZGVyLWxnLTIKICAgICAgICAgICAgICBmaWd1cmUKICAgICAgICAgICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWEzL3NsaWRlci00LnBuZyIpCiAgICAgICAgICAgIC5jb2wtbGctNy5vcmRlci1sZy0xCiAgICAgICAgICAgICAgaDUgTGEgY29uc3VsdGEgcG9wdWxhcgogICAgICAgICAgICAgIHAgSW5zdHJ1bWVudG8gcGFyYSBkZWNpZGlyIHNvYnJlIGFzdW50b3MgZGUgaW50ZXLDqXMgbmFjaW9uYWwsIGRlcGFydGFtZW50YWwgbyBsb2NhbC4gRWplbXBsbzogTGEgY29uc3VsdGEgZW4gQ2FqYW1hcmNhLCBUb2xpbWEsIHJlY2hhesOzIGxhIGV4cGxvdGFjacOzbiBtaW5lcmEsIGRlbW9zdHJhbmRvIGxhIHJlbGV2YW5jaWEgZGUgbGEgcGFydGljaXBhY2nDs24gY29tdW5pdGFyaWEgZW4gZGVjaXNpb25lcyBhbWJpZW50YWxlcy4KICAgICAgICAgIC5yb3cuYWxpZ24taXRlbXMtY2VudGVyLnAtNC5wLW1kLTUKICAgICAgICAgICAgLmNvbC1sZy01Lm9yZGVyLWxnLTIKICAgICAgICAgICAgICBmaWd1cmUKICAgICAgICAgICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWEzL3NsaWRlci01LnBuZyIpCiAgICAgICAgICAgIC5jb2wtbGctNy5vcmRlci1sZy0xCiAgICAgICAgICAgICAgaDUgTGEgaW5pY2lhdGl2YSBsZWdpc2xhdGl2YSBvIG5vcm1hdGl2YQogICAgICAgICAgICAgIHAgUGVybWl0ZSBhIGxvcyBjaXVkYWRhbm9zIHByb3BvbmVyIHByb3llY3RvcyBkZSBsZXkgbyBub3JtYXRpdmFzIGxvY2FsZXMuIEVqZW1wbG86IExhIExleSAxODAxIGRlIDIwMTYgKEPDs2RpZ28gTmFjaW9uYWwgZGUgUG9saWPDrWEpIHN1cmdpw7MgZGUgdW5hIHByb3B1ZXN0YSBjaXVkYWRhbmEgcGFyYSBhYm9yZGFyIHByb2JsZW1hcyBkZSBjb252aXZlbmNpYS4KICAgICAgICAgIC5yb3cuYWxpZ24taXRlbXMtY2VudGVyLnAtNC5wLW1kLTUKICAgICAgICAgICAgLmNvbC1sZy01Lm9yZGVyLWxnLTIKICAgICAgICAgICAgICBmaWd1cmUKICAgICAgICAgICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWEzL3NsaWRlci02LnBuZyIpCiAgICAgICAgICAgIC5jb2wtbGctNy5vcmRlci1sZy0xCiAgICAgICAgICAgICAgaDUgTGEgcmV2b2NhdG9yaWEgZGVsIG1hbmRhdG8KICAgICAgICAgICAgICBwIFByb2NlZGltaWVudG8gcGFyYSByZW1vdmVyIGdvYmVybmFudGVzIGVsZWdpZG9zIHBvciB2b3RvIHBvcHVsYXIsIGdhcmFudGl6YW5kbyBsYSByZW5kaWNpw7NuIGRlIGN1ZW50YXMuIEVqZW1wbG86IEVuIDIwMjEsIGxhIHJldm9jYXRvcmlhIGRlbCBhbGNhbGRlIGRlIE1lZGVsbMOtbiwgRGFuaWVsIFF1aW50ZXJvLCBwdXNvIGVuIGV2aWRlbmNpYSBsb3MgcmV0b3MgZGUgZXN0ZSBtZWNhbmlzbW8gZW4gQ29sb21iaWEuCgoKICAgICAgICAgIC5yb3cuYWxpZ24taXRlbXMtY2VudGVyLnAtNC5wLW1kLTUKICAgICAgICAgICAgLmNvbC1sZy01Lm9yZGVyLWxnLTIKICAgICAgICAgICAgICBmaWd1cmUKICAgICAgICAgICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWEzL3NsaWRlci03LnBuZyIpCiAgICAgICAgICAgIC5jb2wtbGctNy5vcmRlci1sZy0xCiAgICAgICAgICAgICAgaDUgRWwgY2FiaWxkbyBhYmllcnRvCiAgICAgICAgICAgICAgcCBFc3BhY2lvIGRlIGRlbGliZXJhY2nDs24gZGlyZWN0YSBlbnRyZSBjaXVkYWRhbm9zIHkgYXV0b3JpZGFkZXMgbG9jYWxlcy4gRWplbXBsbzogRW4gUGFzdG8sIHNlIGhhbiBkZWJhdGlkbyBwcm95ZWN0b3MgZGUgaW5mcmFlc3RydWN0dXJhIHkgcG9sw610aWNhcyBhbWJpZW50YWxlcyBtZWRpYW50ZSBjYWJpbGRvcyBhYmllcnRvcy4KICAgICAgICAgIC5yb3cuYWxpZ24taXRlbXMtY2VudGVyLnAtNC5wLW1kLTUKICAgICAgICAgICAgLmNvbC1sZy01Lm9yZGVyLWxnLTIKICAgICAgICAgICAgICBmaWd1cmUKICAgICAgICAgICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWEzL3NsaWRlci04LnBuZyIpCiAgICAgICAgICAgIC5jb2wtbGctNy5vcmRlci1sZy0xCiAgICAgICAgICAgICAgaDUgTGEgYWNjacOzbiBkZSB0dXRlbGEKICAgICAgICAgICAgICBwIEhlcnJhbWllbnRhIHBhcmEgcHJvdGVnZXIgZGVyZWNob3MgZnVuZGFtZW50YWxlcyBjb25zYWdyYWRhIGVuIGVsIGFydMOtY3VsbyA4NiBkZSBsYSBDb25zdGl0dWNpw7NuLiBFamVtcGxvOiBQZXJtaXRlIGEgbG9zIGp1ZWNlcyByZWN1cnJpciBhbCBibG9xdWUgZGUgY29uc3RpdHVjaW9uYWxpZGFkIHBhcmEgZ2FyYW50aXphciBkZXJlY2hvcywgaW50ZWdyYW5kbyBwcmluY2lwaW9zIGludGVybmFjaW9uYWxlcyBlbiBzdSByZXNvbHVjacOzbi4KICAgICAgICAgIC5yb3cuYWxpZ24taXRlbXMtY2VudGVyLnAtNC5wLW1kLTUKICAgICAgICAgICAgLmNvbC1sZy01Lm9yZGVyLWxnLTIKICAgICAgICAgICAgICBmaWd1cmUKICAgICAgICAgICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWEzL3NsaWRlci05LnBuZyIpCiAgICAgICAgICAgIC5jb2wtbGctNy5vcmRlci1sZy0xCiAgICAgICAgICAgICAgaDUgRWwgZGVyZWNobyBkZSBwZXRpY2nDs24KICAgICAgICAgICAgICBwIEdhcmFudGl6YSBlbCBhY2Nlc28gYSBpbmZvcm1hY2nDs24gcMO6YmxpY2EgeSByZXNwdWVzdGEgcG9yIHBhcnRlIGRlIGxhcyBhdXRvcmlkYWRlcy4gRWplbXBsbzogQ2l1ZGFkYW5vcyBoYW4gdXRpbGl6YWRvIGVzdGUgbWVjYW5pc21vIHBhcmEgb2J0ZW5lciBkYXRvcyBzb2JyZSBwcm95ZWN0b3MgZGUgaW5mcmFlc3RydWN0dXJhIHkgcG9sw610aWNhcyBhbWJpZW50YWxlcywgZm9ydGFsZWNpZW5kbyBsYSB0cmFuc3BhcmVuY2lhIHkgbGEgcmVuZGljacOzbiBkZSBjdWVudGFzLgoKCiAgICAuYmctZnVsbC13aWR0aC5iZy1jb2xvci00Lm1iLTUKICAgICAgLnB4LTQucHgtbWQtNS5weS00CiAgICAgICAgLnJvdy5hbGlnbi1pdGVtcy1jZW50ZXIKICAgICAgICAgIC5jb2wtbGctYXV0bwogICAgICAgICAgICBpbWcoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hMy8xLnN2ZyIsIHN0eWxlPSJtYXgtd2lkdGg6IDkwcHgiKS5teC1hdXRvCiAgICAgICAgICAuY29sLWxnCiAgICAgICAgICAgIHAubWItMCBMb3MgbWVjYW5pc21vcyBkZSBwYXJ0aWNpcGFjacOzbiBjaXVkYWRhbmEsIGp1bnRvIGNvbiBlbCBibG9xdWUgZGUgY29uc3RpdHVjaW9uYWxpZGFkLCBmb3J0YWxlY2VuIGxhIGRlbW9jcmFjaWEgZW4gQ29sb21iaWEgYWwgb2ZyZWNlciBkaXZlcnNhcyBoZXJyYW1pZW50YXMgcGFyYSBxdWUgbG9zIGNpdWRhZGFub3MgZWplcnphbiBzdXMgZGVyZWNob3MsIHByb211ZXZhbiBsYSB0cmFuc3BhcmVuY2lhIHkgY29udHJpYnV5YW4gYSBsYSBjb25zdHJ1Y2Npw7NuIGRlIHVuIEVzdGFkbyBtw6FzIGp1c3RvIGUgaW5jbHV5ZW50ZS4KCgogICAgLmJnLWZ1bGwtd2lkdGguYm9yZGVyLXRvcC5hY3RpdmlkYWQuYmctY29sb3ItYWN0aXZpZGFkCiAgICAgIC5wLTQucC1tZC01CiAgICAgICAgI0FjdGl2aWRhZCAgICAgICAgICAgICAgICAKICAgICAgICAgIDxBY3RpdmlkYWQgOmN1ZXN0aW9uYXJpbz0iY3Vlc3Rpb25hcmlvIi8+CgogICAgLmJnLWZ1bGwtd2lkdGguYm9yZGVyLXRvcC5jb2xvci1wcmltYXJpbwogICAgICAucC00LnAtbWQtNQogICAgICAgIGgyKGRhdGEtYW9zPSJmYWRlLWxlZnQiKSBNQVRFUklBTCBDT01QTEVNRU5UQVJJTwogICAgICAgIC5yb3cubWF0ZXJpYWwtY29tcGxlbWVudGFyaW8KICAgICAgICAgIC5jb2wtMTIuY29sLW1kLTYuY29sLWxnLTcKICAgICAgICAgICAgcCBMb3MgaW52aXRhbW9zIGEgZXhwbG9yYXIgZWwgbWF0ZXJpYWwgY29tcGxlbWVudGFyaW8gZGUgZXN0ZSBjdXJzbywgZW4gZXN0YSBzZWNjacOzbiBlbmNvbnRyYXLDoSByZWN1cnNvcyBxdWUgbGUgcGVybWl0aXLDoW4gcHJvZnVuZGl6YXIgIHkgZW5yaXF1ZWNlciBzdSBhcHJlbmRpemFqZSBlbiBsb3MgdGVtYXMgdHJhdGFkb3MgZW4gZXN0YSB1bmlkYWQuCgogICAgICAgICAgICBwLmQtZmxleC5teS00CiAgICAgICAgICAgICAgaW1nLm1lLTMoc3JjPSdAL2Fzc2V0cy9jb21wb25lbnRlcy9saW5rLnN2ZycgOnN0eWxlPSJ7J21heC13aWR0aCc6JzE2cHgnfSIpCiAgICAgICAgICAgICAgYShocmVmPSJodHRwczovL2JpYmxpb3RlY2FkaWdpdGFsLnVkZWEuZWR1LmNvL2JpdHN0cmVhbS8xMDQ5NS8xMjQ5Ni8xL0Fycm95YXZlU2ViYXN0aWFuXzIwMThfRGltZW5zaW9uRmlzY2FsRGVzY2VudHJhbGl6YWNpb25UZXJyaXRvcmlhbC5wZGYiIHRhcmdldD0iX2JsYW5rIiByZWw9Im5vb3BlbmVyIG5vcmVmZXJyZXIiKSBBcnJveWF2ZSwgUy4gKDIwMTgpLiBMYSBkaW1lbnNpw7NuIGZpc2NhbCBlbiBsYSBkZXNjZW50cmFsaXphY2nDs24gdGVycml0b3JpYWwgZW4gQ29sb21iaWEgY29tbyBsaW1pdGFudGUgZGUgbGEgYXV0b25vbcOtYSBzdWJuYWNpb25hbCAuIFVuaXZlcnNpZGFkIGRlIEFudGlvcXVpYS4KCiAgICAgICAgICAgICAgcC5kLWZsZXgubXktNAogICAgICAgICAgICAgIGltZy5tZS0zKHNyYz0nQC9hc3NldHMvY29tcG9uZW50ZXMvbGluay5zdmcnIDpzdHlsZT0ieydtYXgtd2lkdGgnOicxNnB4J30iKQogICAgICAgICAgICAgIGEoaHJlZj0iaHR0cHM6Ly9yZXBvc2l0b3J5LnVuaW1pbGl0YXIuZWR1LmNvL2JpdHN0cmVhbS9oYW5kbGUvMTA2NTQvMTY1MzAvQ2FyZG9uYUdhbHZlekxpbmFOYXRoYWxpYTIwMTcuUERGLnBkZj9zZXF1ZW5jZT0xIiB0YXJnZXQ9Il9ibGFuayIgcmVsPSJub29wZW5lciBub3JlZmVycmVyIikgQ2FyZG9uYSBHw6FsdmV6LCBMTiAoMjAxNykuIERlYmlsaWRhZGVzIGRlbCBtb2RlbG8gYWRtaW5pc3RyYXRpdm8gdGVycml0b3JpYWwgYWwgaW5lZmljaWVuY2lhIGVuIGxhIGdlc3Rpw7NuIHDDumJsaWNhIG11bmljaXBhbCBlbiBDb2xvbWJpYS4gVW5pdmVyc2lkYWQgTWlsaXRhciBOdWV2YSBHcmFuYWRhLiAKCgogICAgICAgICAgLmNvbC0xMi5jb2wtbWQtNi5jb2wtbGctMy5vZmZzZXQtbGctMQogICAgICAgICAgICBmaWd1cmUKICAgICAgICAgICAgICBpbWcoc3JjPSdAL2Fzc2V0cy9jb21wb25lbnRlcy9tYXRlcmlhbC1jb21wbGVtZW50YXJpby5zdmcnLCBhbHQ9JycpCgo="},null]}